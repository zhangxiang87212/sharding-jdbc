spring.main.allow-bean-definition-overriding=true

# 定义两个全局数据源
spring.shardingsphere.datasource.names=ds-0,ds-1
# 配置数据源 ds-0
spring.shardingsphere.datasource.ds-0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds-0.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-0.url=jdbc:mysql://127.0.0.1:8889/ds-0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-0.username=root
spring.shardingsphere.datasource.ds-0.password=root
# 配置数据源 ds-1
spring.shardingsphere.datasource.ds-1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds-1.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-1.url=jdbc:mysql://127.0.0.1:8889/ds-1?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-1.username=root
spring.shardingsphere.datasource.ds-1.password=root


# 配置分片表 t_order
# 指定真实数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..2}

########################################################################################################################################
#### 分库策略
## 分库分片健
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=order_id
## 分库分片算法
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds-$->{order_id % 2}
## 分表策略
## 分表分片健
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
## 分表算法
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 3}
########################################################################################################################################


### 分库策略
# 分库分片健
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.sharding-column=order_id
# 分库分片算法
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.precise-algorithm-class-name=com.example\
  .demo.algorithm.dbAlgorithm.MyDBPreciseShardingAlgorithm
#范围分片算法
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.range-algorithm-class-name=com.example\
  .demo.algorithm.dbAlgorithm.MyDBRangeShardingAlgorithm
# 分表策略
# 分表分片健
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
# 分表算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.example\
  .demo.algorithm.tableAlgorithm.MyTablePreciseShardingAlgorithm
#范围分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name=com.example\
  .demo.algorithm.tableAlgorithm.MyTableRangeShardingAlgorithm


# 自增主键字段
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 自增主键ID 生成方案
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 工作机器唯一 id
spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=0000
#
spring.shardingsphere.sharding.tables.t_order.key-generator.max.tolerate.time.difference.milliseconds=5



## 配置 t_order 表规则
#spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..2}
#
## 配置分库策略
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=order_id
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline
#
## 配置分表策略
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=table_inline
#
## 省略配置 t_order_item 表规则...
## ...
#
## 配置 分片算法
#spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds_${order_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algorithm-expression=t_order_${order_id % 3}



# 配置分片表 t_order_item
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds-$->{0..1}.t_order_item_$->{0..2}
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ds-$->{order_id % 2}
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{order_id % 3}
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=item_id
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE

# 绑定表关系
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
# 默认数据源，未分片的表默认执行库
spring.shardingsphere.sharding.default-data-source-name=ds-0
# 配置广播表
spring.shardingsphere.sharding.broadcast-tables=t_config
# 是否开启 SQL解析日志
spring.shardingsphere.props.sql.show=true

#找了好几个小时的错误，org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)
# 最后在google搜索spring.shardingsphere.sharding.tables.t_order.database-strategy，发现了原因
mybatis-plus.mapper-locations=classpath:mapping/*.xml
mybatis-plus.map-underscore-to-camel-case=true

#mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

spring.devtools.restart.enabled=true

